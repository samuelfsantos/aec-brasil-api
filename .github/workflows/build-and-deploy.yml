name: CI_CD_PRD

# 1
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

#2
env:
  REGISTRY: "registry.digitalocean.com/dcr-samuel"
  IMAGE_NAME_API: "aec-brasil-api"
  IMAGE_NAME_DB: "aec-brasil-db"

#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:        
      - name: Checkout the repo 
        uses: actions/checkout@v2        
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      
      - name: Set TAG environment variable
        run: echo TAG=$(echo $GITHUB_SHA | head -c7) >> $GITHUB_ENV

      - name: Build Docker Images
        run: |
          docker-compose -f docker-compose.yml build --no-cache
          docker image ls

      - name: Push Docker Images
        run: docker-compose -f docker-compose.yml push
                  
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    
    steps:

      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          envs:
            IMAGE_NAME_API, IMAGE_NAME_DB,
            REGISTRY, GITHUB_SHA
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            
            # Stop old containers
            docker stop $IMAGE_NAME_API || true
            docker stop $IMAGE_NAME_DB || true
            
            # Remove old containers
            docker rm $IMAGE_NAME_API || true
            docker rm $IMAGE_NAME_DB || true
            
            # Run new containers
            docker run -dt -p 5020:5020 \
              --restart always \
              --name $IMAGE_NAME_API \
              --network aec-brasil-network \
              $REGISTRY/$IMAGE_NAME_API:${{ env.TAG }}
            
            docker run -dt -p 5022:1433 \
              --restart always \
              --name $IMAGE_NAME_DB \
              --network aec-brasil-network \
              $REGISTRY/$IMAGE_NAME_DB:latest